This is the code practice for coursera couse: [Introductory C Programming Specialization](https://www.coursera.org/specializations/c-programming#courses)

Reference: 
1. https://github.com/mvirgo/c-programming/tree/master

2. https://github.com/AhmedGharib0014/Programming-Fundamentals-c-course-by-Duke-university

# GDB command

start: Begin (or restart) the program’s execution. Stop the program (to accept more commands) as soon as execution enters main.

run: This command runs the program (possibly restarting it). It will not stop unless it encounters some other condition that causes it to stop (we will learn about these later).

step: Advance the program one “step”, in much the same way that we would advance the execution arrow when executing code by hand. More specifically, gdb will execute until the execution arrow moves to a different line of source code, whether that is by going to the next line, jumping in response to control flow, or some other reason. In particular, step will go into a function called by the current line. This command can be abbreviated s.

next: Advance the program one line of code. However, unlike step, if the current line of code is a function call, gdb will execute the entire called function without stopping. This command can be abbreviated n.

print: The print command takes an expression as an argument, evaluates that expression, and prints the results. Note that if the expression has side-effects, they will happen, and will affect the state of the program (e.g., if you do print x = 3, it will set x to 3, then print 3). You can put /x after print to get the result printed in hexadecimal format. This command can be abbreviated p (or p/x to print in hex). Every time you print the value of an expression, gdb will remember the value in its own internal variables which are named $1, $2, etc (you can tell which one it used, because it will say which one it assigned to when it prints the value—e.g., $1 = 42). You can use these $ variables in other expressions if you want to make use of these values later. gdb also has a feature to let you print multiple elements from an array—if you put @number after an lvalue, gdb will print number values starting at the location you named. This feature is most useful with arrays—for example, if a is an array, you can do p a[0]@5 to print the first 5 elements of a.

display: The display command takes an expression as an argument, and displays its value every time gdb stops and displays a prompt. For example display i will evaluate and print i before each (gdb) prompt. You can abbreviate this command disp.

If you hit enter without entering any command, gdb will repeat the last command you entered. This feature is most useful when you want to use step or next multiple times in a row.

Note that if you need to pass command line arguments to your program, you can either write them after the start or run command (e.g., run someArg anotherArg), or you can use set args to set the command line arguments.